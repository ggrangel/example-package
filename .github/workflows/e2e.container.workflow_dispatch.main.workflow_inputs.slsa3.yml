# This e2e test performs the following via a GitHub Actions workflow_dispatch event.
# - Build the Go application into a Docker image
# - Push the image to ghcr.io
# - Generate SLSA provenance for the image
# - Upload the provenance to ghcr.io
# - Verify the created provenance attestation.

on:
  schedule:
    - cron: "0 3 * * *"
  workflow_dispatch:
    inputs:
      test:
        description: test
        required: false
        default: true

permissions: {}

concurrency: "e2e.container.workflow_dispatch.main.workflow_inputs.slsa3"

env:
  GH_TOKEN: ${{ secrets.E2E_CONTAINER_TOKEN }}
  ISSUE_REPOSITORY: slsa-framework/slsa-github-generator

  IMAGE_REGISTRY: ghcr.io
  # NOTE: This pushes a container image to a "package" under the
  # slsa-framework GitHub org.
  # The image name should be of the form: slsa-framework/example-package.<test name>
  IMAGE_NAME: slsa-framework/example-package.e2e.container.workflow_dispatch.main.default.slsa3

jobs:
  dispatch:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    permissions:
      actions: write
      contents: write
    steps:
      - uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # v3.6.0
      - run: ./.github/workflows/scripts/e2e-dispatch.sh

  # Build the Go application into a Docker image
  # Push the image to ghcr.io
  build:
    if: github.event_name == 'workflow_dispatch'
    permissions:
      contents: read # For reading repository contents.
      packages: write # For writing container images.
    outputs:
      image: ${{ steps.image.outputs.image }}
      digest: ${{ steps.build.outputs.digest }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # v3.6.0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@885d1462b80bc1c1c7f0b00334ad271f09369c55 # v2.10.0

      - name: Authenticate Docker
        uses: docker/login-action@465a07811f14bebb1938fbed4728c6a1ff8901fc # v2.2.0
        with:
          registry: ${{ env.IMAGE_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@818d4b7b91585d195f67373fd9cb0332e31a7175 # v4.6.0
        with:
          images: ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        uses: docker/build-push-action@0a97817b6ade9f46837855d676c4cca3a2471fc9 # v4.2.1
        id: build
        with:
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Output image
        id: image
        run: |
          # NOTE: We need to use the image and digest in order to make sure
          # that the image we attest has not been modified.
          # NOTE: The digest output from docker/build-push-action is of the
          # form "sha256:<digest>"
          full_image_name="${IMAGE_REGISTRY}/${IMAGE_NAME}"
          echo "image=$full_image_name" >> "${GITHUB_OUTPUT}"

  # Generate SLSA provenance for the image
  # Upload the provenance to ghcr.io
  provenance:
    if: github.event_name == 'workflow_dispatch'
    needs: [build]
    permissions:
      id-token: write # For signing.
      actions: read # For reading workflow info.
      packages: write # For uploading attestations.
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_container_slsa3.yml@main
    with:
      image: ${{ needs.build.outputs.image }}
      digest: ${{ needs.build.outputs.digest }}
      registry-username: ${{ github.actor }}
      compile-generator: true
    secrets:
      registry-password: ${{ secrets.GITHUB_TOKEN }}

  # Verify the created provenance attestation.
  verify:
    # NOTE: this name is used as the status check name and by protected
    # branches for required status checks. It should have a unique name among
    # other pre-submits.
    if: github.event_name == 'workflow_dispatch'
    needs: [build, provenance]
    permissions:
      packages: read # For reading attestations.
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # v3.6.0
      - uses: sigstore/cosign-installer@9614fae9e5c5eddabb09f90a270fcb487c9f7149 # v3.3.0
      - env:
          REGISTRY_USERNAME: ${{ github.actor }}
          REGISTRY_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
          IMAGE_NAME: ${{ needs.build.outputs.image }}
          IMAGE_DIGEST: ${{ needs.build.outputs.digest }}
        run: |
          cosign login "${IMAGE_REGISTRY}" -u "${REGISTRY_USERNAME}" -p "${REGISTRY_PASSWORD}"

          # TODO: use --enforce-sct
          # TODO: add cue policy for further validation.
          # NOTE: COSIGN_EXPERIMENTAL is needed to check the transparency log.
          COSIGN_EXPERIMENTAL=1 cosign verify-attestation \
            --type slsaprovenance \
            --certificate-oidc-issuer https://token.actions.githubusercontent.com \
            --certificate-identity https://github.com/slsa-framework/slsa-github-generator/.github/workflows/generator_container_slsa3.yml@refs/heads/main \
            "${IMAGE_NAME}@${IMAGE_DIGEST}" > "${GITHUB_WORKSPACE}/provenance.json"

          echo "provenance_file=${GITHUB_WORKSPACE}/provenance.json" >> "$GITHUB_ENV"
          echo "container=${IMAGE_NAME}@${IMAGE_DIGEST}" >> "$GITHUB_ENV"
      - uses: actions/setup-go@93397bea11091df50f3d7e59dc26a7711a8bcfbe # v4.1.0
        with:
          go-version: "1.21"
      - env:
          CONTAINER: "${{ env.container }}"
          PROVENANCE: "${{ env.provenance_file }}"
        run: ./.github/workflows/scripts/e2e.container.default.verify.sh

  if-succeeded:
    runs-on: ubuntu-latest
    needs: [build, provenance, verify]
    if: github.event_name == 'workflow_dispatch' && needs.build.result == 'success' && needs.provenance.result == 'success' && needs.verify.result == 'success'
    steps:
      - uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # v3.6.0
      - run: ./.github/workflows/scripts/e2e-report-success.sh

  if-failed:
    runs-on: ubuntu-latest
    needs: [build, provenance, verify]
    if: always() && github.event_name == 'workflow_dispatch' && (needs.build.result == 'failure' || needs.provenance.result == 'failure' || needs.verify.result == 'failure')
    steps:
      - uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # v3.6.0
      - run: ./.github/workflows/scripts/e2e-report-failure.sh
